- name: multi-tenancy migration dumpdata
  shell: "{{ virtualenv_path }}/bin/python manage.py dumpdata > pre_multitenancy_migration.json"
  args:
    chdir: "{{ openwisp2_path }}"
    creates: "{{ openwisp2_path }}/pre_multitenancy_migration.json"

- name: upload multitenancy_prepare_data.py script
  template:
    src: multitenancy_prepare_data.py
    dest: "{{ openwisp2_path }}/multitenancy_prepare_data.py"
    mode: 0754

- name: prepare data for multitenancy migration
  command: "./multitenancy_prepare_data.py"
  args:
    chdir: "{{ openwisp2_path }}"
    creates: "{{ openwisp2_path }}/post_multitenancy_migration.json"

- name: DROP sqlite database
  when: openwisp2_database.engine == "django.db.backends.sqlite3"
  file:
    name: "{{ openwisp2_database.name }}"
    state: absent

- name: DROP postgres database
  when: openwisp2_database.engine in ["django.db.backends.postgresql", "django.contrib.gis.db.backends.postgis"]
  become: true
  become_user: postgres
  postgresql_db:
    name: "{{ openwisp2_database.name }}"
    state: absent

- name: CREATE postgres database
  when: openwisp2_database.engine in ["django.db.backends.postgresql", "django.contrib.gis.db.backends.postgis"]
  become: true
  become_user: postgres
  postgresql_db:
    name: "{{ openwisp2_database.name }}"
    state: present

- name: install python-mysqldb in system python packages
  when: openwisp2_database.engine in ["django.db.backends.mysql", "django.contrib.gis.db.backends.mysql"]
  pip:
    name: MySQL-python
  retries: 5
  delay: 10
  register: result
  until: result is success

- name: DROP mysql database
  when: openwisp2_database.engine in ["django.db.backends.mysql", "django.contrib.gis.db.backends.mysql"]
  mysql_db:
    name: "{{ openwisp2_database.name }}"
    state: absent
    login_user: "{{ openwisp2_database.user }}"
    login_password: "{{ openwisp2_database.password }}"
    login_host: "{{ openwisp2_database.host|default('127.0.0.1') }}"
    login_port: "{{ openwisp2_database.port|default('3306') }}"

- name: CREATE mysql database
  when: openwisp2_database.engine in ["django.db.backends.mysql", "django.contrib.gis.db.backends.mysql"]
  mysql_db:
    name: "{{ openwisp2_database.name }}"
    state: present
    login_user: "{{ openwisp2_database.user }}"
    login_password: "{{ openwisp2_database.password }}"
    login_host: "{{ openwisp2_database.host|default('127.0.0.1') }}"
    login_port: "{{ openwisp2_database.port|default('3306') }}"

# this task purposely duplicates this operation in order to isolate
# all the multitenancy-migration operations in this single YAML file
- name: urls.py
  notify: reload supervisor
  template:
    src: openwisp2/urls.py
    dest: "{{ openwisp2_path }}/openwisp2/urls.py"
    group: www-data

# this task purposely duplicates this operation in order to isolate
# all the multitenancy-migration operations in this single YAML file
# set openwisp2_secret_key if not defined explicitly
- import_tasks: django_secret_key.yml
  when: openwisp2_secret_key is not defined

# this task purposely duplicates this operation in order to isolate
# all the multitenancy-migration operations in this single YAML file
- name: settings.py
  notify: reload supervisor
  template:
    src: openwisp2/settings.py
    dest: "{{ openwisp2_path }}/openwisp2/settings.py"
    group: www-data

# this task purposely duplicates this operation in order to isolate
# all the multitenancy-migration operations in this single YAML file
- name: migrate
  notify: reload supervisor
  become: yes
  become_user: www-data
  django_manage:
    app_path: "{{ openwisp2_path }}"
    command: migrate
    virtualenv: "{{ virtualenv_path }}"

# this task purposely duplicates this operation in order to isolate
# all the multitenancy-migration operations in this single YAML file
- name: set permissions to sqlite db
  when: openwisp2_database.engine == "django.db.backends.sqlite3"
  file:
    path: "{{ openwisp2_database.name }}"
    state: file
    group: www-data
    mode: 0775

- name: upload multitenancy_prepare_db.py script
  template:
    src: multitenancy_prepare_db.py
    dest: "{{ openwisp2_path }}/multitenancy_prepare_db.py"
    mode: 0754

- name: prepare DB for multitenancy migration
  command: "{{ virtualenv_path }}/bin/python multitenancy_prepare_db.py"

- name: multitenancy migration loaddata
  become: yes
  become_user: www-data
  django_manage:
    app_path: "{{ openwisp2_path }}"
    command: loaddata
    fixtures: post_multitenancy_migration.json
    virtualenv: "{{ virtualenv_path }}"
