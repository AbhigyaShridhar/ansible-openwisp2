---

.testing_script_template: &testing_script
  stage: ansible
  tags:
   - docker-ansible
  before_script:
   - echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token $CI_REGISTRY --password-stdin
  script:
    # run ci tests
    - ${PWD}/tests/runtests.sh

  dependencies: []
  after_script:
    - docker rm -f $container_id

.terraform_setup_template: &terraform_setup
  image:
    name: hashicorp/terraform:light
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  before_script:
    - wget -O $CI_PROJECT_DIR/terraform.tf https://gitlab.com/snippets/1757951/raw
    - rm -rf .terraform
    - terraform --version
    - mkdir -p ./creds
    - echo $SERVICEACCOUNT | base64 -d > ./creds/serviceaccount.json
    - terraform init

variables:
  cleanup: 'false'
  container_id: '$CI_JOB_NAME-$CI_PROJECT_NAME-Pipeline$CI_PIPELINE_ID-Job$CI_JOB_ID'

stages:
  - validate
  - plan
  - apply
  - ansible
  - destroy

ansible-syntax:
  stage: validate
  tags:
    - docker
  image:
    name: registry.gitlab.com/hispanico/docker-terraform-ansible:latest
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  script:
    - ansible-galaxy install -r tests/requirements.yml
    - ln -s $CI_PROJECT_DIR ~/.ansible/roles/role_under_test
    - ansible-playbook tests/test.yml --syntax-check
    - ansible-playbook tests/test_networktopology.yml --syntax-check

ansible-lint:
  stage: validate
  tags:
    - docker
  image:
    name: registry.gitlab.com/hispanico/docker-terraform-ansible:latest
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  script:
    - ansible-galaxy install -r tests/requirements.yml
    - ln -s $CI_PROJECT_DIR ~/.ansible/roles/role_under_test
    - ansible-lint tests/test.yml
    - ansible-lint tests/test_networktopology.yml
  allow_failure: true

terraform-validate:
  stage: validate
  tags:
    - docker
  <<: *terraform_setup
  script:
    - terraform validate

terraform-plan:
  stage: plan
  tags:
    - docker
  <<: *terraform_setup
  script:
    - terraform plan -out "planfile"
  dependencies:
    - terraform-validate
  artifacts:
    paths:
      - planfile

terraform-apply:
  stage: apply
  tags:
    - docker
  <<: *terraform_setup
  script:
    - terraform apply -input=false "planfile"
  dependencies:
    - terraform-plan

Ubuntu1604:
  variables:
    distro: 'ubuntu:16.04'
    playbook: test.yml
  <<: *testing_script

Ubuntu1804:
  variables:
    distro: 'ubuntu:18.04'
    playbook: test.yml
  <<: *testing_script

Debian9:
  variables:
    distro: debian:9
    playbook: test.yml
  <<: *testing_script

Debian10:
  variables:
    distro: debian:10
    playbook: test.yml
  <<: *testing_script
  allow_failure: true

Ubuntu1804_NetworkTopology:
  variables:
    distro: 'ubuntu:18.04'
    playbook: test_networktopology.yml
  <<: *testing_script

# we don't have the resources now to maintain these distros

# Centos7:
#   variables:
#     distro: centos:7
#     playbook: test.yml
#   <<: *testing_script
#
# Fedora27:
#   variables:
#     distro: fedora:27
#     playbook: test.yml
#   <<: *testing_script
#
# Fedora28:
#   variables:
#     distro: fedora:28
#     playbook: test.yml
#   <<: *testing_script
#   allow_failure: true

terraform-destroy_on_failure:
  stage: destroy
  tags:
    - docker
  <<: *terraform_setup
  script:
    - terraform destroy -auto-approve
  dependencies: []
  when: on_failure

terraform-destroy:
  stage: destroy
  tags:
    - docker
  <<: *terraform_setup
  script:
    - terraform destroy -auto-approve
  dependencies: []
